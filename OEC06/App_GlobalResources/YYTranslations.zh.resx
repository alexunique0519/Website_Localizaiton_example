<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="about" xml:space="preserve">
    <value>关于</value>
  </data>
  <data name="address" xml:space="preserve">
    <value>地址</value>
  </data>
  <data name="backToList" xml:space="preserve">
    <value>回到列表</value>
  </data>
  <data name="cellPhone" xml:space="preserve">
    <value>移动电话</value>
  </data>
  <data name="cellPhoneDigits" xml:space="preserve">
    <value>移动电话号码必须为10位（包含区域号码）</value>
  </data>
  <data name="contact" xml:space="preserve">
    <value>联系方式</value>
  </data>
  <data name="county" xml:space="preserve">
    <value>县</value>
  </data>
  <data name="Create" xml:space="preserve">
    <value>创建</value>
  </data>
  <data name="CreateNewFarm" xml:space="preserve">
    <value>创建新农场记录</value>
  </data>
  <data name="dataJoinedMustBeGiven" xml:space="preserve">
    <value>如果最后填写最后联系日期，那么必须提供加入日期</value>
  </data>
  <data name="dateJoined" xml:space="preserve">
    <value>加入时间</value>
  </data>
  <data name="delete" xml:space="preserve">
    <value>删除</value>
  </data>
  <data name="deleteException" xml:space="preserve">
    <value>数据删除异常: </value>
  </data>
  <data name="details" xml:space="preserve">
    <value>详情</value>
  </data>
  <data name="direction" xml:space="preserve">
    <value>方向</value>
  </data>
  <data name="edit" xml:space="preserve">
    <value>编辑</value>
  </data>
  <data name="farm" xml:space="preserve">
    <value>农场</value>
  </data>
  <data name="FarmCannotBeContactedBeforeJoin" xml:space="preserve">
    <value>农场在加入项目之前不能被联系</value>
  </data>
  <data name="farmId" xml:space="preserve">
    <value>农场编号</value>
  </data>
  <data name="farmListing" xml:space="preserve">
    <value>农场列表</value>
  </data>
  <data name="farms" xml:space="preserve">
    <value>农场</value>
  </data>
  <data name="FieldMustBeDate" xml:space="preserve">
    <value>此项 '{0}' 必须为有效日期</value>
  </data>
  <data name="FieldMustBeNumeric" xml:space="preserve">
    <value>此项 '{0}' 必须为数字</value>
  </data>
  <data name="home" xml:space="preserve">
    <value>主页</value>
  </data>
  <data name="homePhone" xml:space="preserve">
    <value>固定电话</value>
  </data>
  <data name="homePhoneDigits" xml:space="preserve">
    <value>固定电话号码必须为10位（包含区域号码）</value>
  </data>
  <data name="insertException" xml:space="preserve">
    <value>插入数据异常：</value>
  </data>
  <data name="lastContactDate" xml:space="preserve">
    <value>上次联系时间</value>
  </data>
  <data name="name" xml:space="preserve">
    <value>农场名称</value>
  </data>
  <data name="oneTownOrCountyShouldBeProvided" xml:space="preserve">
    <value>城镇或县的名称至少需要提供一个</value>
  </data>
  <data name="postalCode" xml:space="preserve">
    <value>邮编</value>
  </data>
  <data name="postalCodeReg" xml:space="preserve">
    <value>'{0}' 应符合加拿大邮编格式（如:  N2C 2H7）</value>
  </data>
  <data name="provinceCode" xml:space="preserve">
    <value>省</value>
  </data>
  <data name="provinceCodeLength" xml:space="preserve">
    <value>省简称长度为2</value>
  </data>
  <data name="provinceCodeLetter" xml:space="preserve">
    <value>省简称只能由字母组成</value>
  </data>
  <data name="provinceCodeReg" xml:space="preserve">
    <value>'{0}'应符合加拿大省编号格式（如: ON）</value>
  </data>
  <data name="provinceNotOnFile" xml:space="preserve">
    <value>省缩写 '{0}' 不在数据库中</value>
  </data>
  <data name="recordDeletedForX" xml:space="preserve">
    <value>农场记录 '{0}' 被成功删除</value>
  </data>
  <data name="recordInsertedForX" xml:space="preserve">
    <value>一条新纪录成功添加: '{0}'</value>
  </data>
  <data name="recordUpdatedForX" xml:space="preserve">
    <value>记录 '{0}' 更新成功</value>
  </data>
  <data name="Required" xml:space="preserve">
    <value>'{0}' 不能为空 </value>
  </data>
  <data name="selectlanguage" xml:space="preserve">
    <value>选择语言</value>
  </data>
  <data name="town" xml:space="preserve">
    <value>城镇</value>
  </data>
  <data name="updateException" xml:space="preserve">
    <value>数据更新异常：</value>
  </data>
  <data name="XDateCannotBeInFuture" xml:space="preserve">
    <value>‘{0}’ 不能为将来时间</value>
  </data>
</root>